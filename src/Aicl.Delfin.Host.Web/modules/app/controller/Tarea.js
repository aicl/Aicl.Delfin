/*
 * File: app/controller/Tarea.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('App.controller.Tarea', {
    extend: 'Ext.app.Controller',

    stores: [
        'RemoteTarea',
        'Cliente'
    ],
    views: [
        'tarea.Panel',
        'cliente.Window'
    ],

    refs: [
        {
            ref: 'tareaList',
            selector: 'gridpanel[name=TareaList]'
        },
        {
            ref: 'tareaForm',
            selector: 'form[name=TareaForm]'
        },
        {
            ref: 'findClienteText',
            selector: 'textfield[name=NombreCliente]'
        },
        {
            ref: 'clienteSelectButton',
            selector: 'toolbar[name=FindToolbar] button[action=select]'
        },
        {
            ref: 'clienteList',
            selector: 'gridpanel[name=ClienteList]'
        }
    ],

    onTareaListSelectionChange: function(tablepanel, selections, options) {
        if (selections.length){
            this.getTareaForm().getForm().loadRecord(selections[0]);
        }
        else{
            this.getTareaForm().getForm().reset();
        }
    },

    onNewTareaButtonClick: function(button, e, options) {
        this.getTareaList().getSelectionModel().deselectAll();
    },

    onSaveTareaButtonClick: function(button, e, options) {
        var record=this.getTareaForm().getForm().getFieldValues(false);
        this.getTareaStore().getProxy().extraParams={format:'json'};
        this.getTareaStore().save(record);
    },

    onRemoveTareaButtonClick: function(button, e, options) {
        var grid = this.getTareaList();
        var record = grid.getSelectionModel().getSelection()[0];
        this.getTareaStore().remove(record);
    },

    onFindClienteButtonClick: function(button, e, options) {
        var searchText= this.getFindClienteText().getValue();
        var nit, nombre;
        nit=parseInt(searchText);
        if(isNaN(nit)){
            nit='';
            nombre=searchText;
        }
        else nit= searchText;

        var request={
            Nit: nit,
            Nombre:nombre,
            format:'json'
        };

        var store=this.getClienteStore();
        store.getProxy().extraParams=request;
        store.loadPage(1);
    },

    onClearClienteButtonClick: function(button, e, options) {
        this.getFindClienteText().setValue('');
        this.getTareaForm().getForm().findField("IdCliente").setValue(null);
        this.getTareaForm().getForm().findField("NombreCliente").setValue('');
    },

    onSelectClienteClick: function(button, e, options) {
        this.selectClienteWindow.hide();
        var record= this.getClienteList().getSelectionModel().getSelection()[0];
        this.loadCliente(record);
    },

    onClienteListSelectionChange: function(tablepanel, selections, options) {
        this.getClienteSelectButton().setDisabled(selections.length?false:true);
    },

    init: function(application) {
        this.selectClienteWindow= new App.view.cliente.Window();
        this.selectClienteWindow.setPosition( 440, 165 ) ;

        this.control({
            "gridpanel[name=TareaList]": {
                selectionchange: this.onTareaListSelectionChange
            },
            "toolbar[name=TareaToolbar] button[action=new]": {
                click: this.onNewTareaButtonClick
            },
            "toolbar[name=TareaToolbar] button[action=save]": {
                click: this.onSaveTareaButtonClick
            },
            "toolbar[name=TareaToolbar] button[action=remove]": {
                click: this.onRemoveTareaButtonClick
            },
            "form[name=TareaForm] button[action=find]": {
                click: this.onFindClienteButtonClick
            },
            "form[name=TareaForm] button[action=clear]": {
                click: this.onClearClienteButtonClick
            },
            "toolbar[name=FindToolbar] button[action=select]": {
                click: this.onSelectClienteClick
            },
            "gridpanel[name=ClienteList]": {
                selectionchange: this.onClienteListSelectionChange
            }
        });
    },

    onLaunch: function() {
        var me = this;

        Ext.create('Ext.LoadMask', me.getClienteList(), {
            msg: "Cargando Clientes...",
            store: me.getClienteStore()
        });


        Ext.create('Ext.LoadMask', me.getTareaList(), {
            msg: "Cargando Tareas...",
            store: me.getTareaStore()
        });


        this.getClienteStore().on('load', function(store , records, success, eOpts){
            if(!success){
                Ext.Msg.alert('Error', 'Error al cargar Clientes. Intente mas tarde');
                return;
            }
            if(records.length===0){
                Aicl.Util.msg('Aviso', 'Sin informacion de clientes');
                return;
            }
            if(records.length==1){
                this.loadCliente(records[0]);        
                return;
            }
            this.selectClienteWindow.show();
        }, this);

        this.getTareaStore().on('load', function(store , records, success, eOpts){
            if(!success){
                Ext.Msg.alert('Error', 'Error al cargar Tareas. Intente mas tarde');
                return;
            }
            if(records.length===0){
                Aicl.Util.msg('Aviso', 'Sin Tareas');
                return;
            }

            var record = records[0];
            this.getTareaList().getSelectionModel().select(record,true,true);
            this.getTareaForm().getForm().loadRecord(record);

        }, this);

        this.getTareaStore().on('write', function(store, operation, eOpts ){
            var record =  operation.getRecords()[0];
            if (operation.action != 'destroy'){
                this.getTareaList().getSelectionModel().select(record,true,true);
                this.getTareaForm().getForm().loadRecord(record);
            }       
        }, this);

        var request={
            format:'json'
        };

        this.getTareaStore().getProxy().extraParams=request;
        this.getTareaStore().loadPage(1);

    },

    loadCliente: function(record) {
        this.getTareaForm().getForm().findField("IdCliente").setValue(record.get('Id'));
        this.getTareaForm().getForm().findField("NombreCliente").setValue(record.get('Nombre'));
    },

    getTareaStore: function() {
        return this.getRemoteTareaStore();
    }

});
